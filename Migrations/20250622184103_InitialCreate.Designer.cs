// <auto-generated />
using System;
using AT.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AT.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20250622184103_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("AT.Model.CreateCidade", b =>
                {
                    b.Property<string>("CidadeID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumHabitantes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaisDestinoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CidadeID");

                    b.HasIndex("PaisDestinoId");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("AT.Model.CreateCliente", b =>
                {
                    b.Property<string>("ClienteID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Idade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClienteID");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AT.Model.CreatePacotesTurisco", b =>
                {
                    b.Property<string>("PacoteTuriscoID")
                        .HasColumnType("TEXT");

                    b.Property<int>("CapacidadeMax")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataDaViagem")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeDoPacote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaisDestinoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Preco")
                        .HasColumnType("TEXT");

                    b.HasKey("PacoteTuriscoID");

                    b.HasIndex("PaisDestinoId");

                    b.ToTable("PacotesTuristicos");
                });

            modelBuilder.Entity("AT.Model.CreatePaisDestino", b =>
                {
                    b.Property<string>("PaisDestinoID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PaisDestinoID");

                    b.ToTable("PaisDestinos");
                });

            modelBuilder.Entity("AT.Model.CreateReservas", b =>
                {
                    b.Property<string>("ReservaID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClienteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("TEXT");

                    b.Property<string>("PacoteTuristicoId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecoTotal")
                        .HasColumnType("TEXT");

                    b.HasKey("ReservaID");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PacoteTuristicoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("PacoteCidade", b =>
                {
                    b.Property<string>("CidadeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PacoteTuriscoId")
                        .HasColumnType("TEXT");

                    b.HasKey("CidadeId", "PacoteTuriscoId");

                    b.HasIndex("PacoteTuriscoId");

                    b.ToTable("PacoteCidade");
                });

            modelBuilder.Entity("AT.Model.CreateCidade", b =>
                {
                    b.HasOne("AT.Model.CreatePaisDestino", "PaisDestino")
                        .WithMany("Cidades")
                        .HasForeignKey("PaisDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaisDestino");
                });

            modelBuilder.Entity("AT.Model.CreatePacotesTurisco", b =>
                {
                    b.HasOne("AT.Model.CreatePaisDestino", "PaisDestino")
                        .WithMany("PacotesTuristicos")
                        .HasForeignKey("PaisDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaisDestino");
                });

            modelBuilder.Entity("AT.Model.CreateReservas", b =>
                {
                    b.HasOne("AT.Model.CreateCliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId");

                    b.HasOne("AT.Model.CreatePacotesTurisco", "PacoteTuristico")
                        .WithMany("Reservas")
                        .HasForeignKey("PacoteTuristicoId");

                    b.Navigation("Cliente");

                    b.Navigation("PacoteTuristico");
                });

            modelBuilder.Entity("PacoteCidade", b =>
                {
                    b.HasOne("AT.Model.CreateCidade", null)
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AT.Model.CreatePacotesTurisco", null)
                        .WithMany()
                        .HasForeignKey("PacoteTuriscoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AT.Model.CreateCliente", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("AT.Model.CreatePacotesTurisco", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("AT.Model.CreatePaisDestino", b =>
                {
                    b.Navigation("Cidades");

                    b.Navigation("PacotesTuristicos");
                });
#pragma warning restore 612, 618
        }
    }
}
